{
    "name": "Vanilla",
    "description": "This is an empty Ethereum project",
    "files": "{ \"/\": { \"children\": { \"app\": { \"type\": \"d\", \"children\": { \"app.html\": { \"type\": \"f\", \"contents\": \"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/jquery@3.3.1/dist/jquery.js\"></script>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/web3@0.20.5/dist/web3.min.js\"></script>\n        <!-- The generated javascript and app.js will be substituted in below -->\n        <!-- JAVASCRIPT -->\n\n        <!-- The app.css contents will be substituted in below -->\n        <!-- STYLE -->\n    </head>\n    <body>\n        <h1><span id=\"message\"></span></h1>\n    </body>\n</html>\" }, \"app.css\": { \"type\": \"f\", \"contents\": \"body {\n    background-color: #725BA4;\n    color: #FCE8DF;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    text-align: center;\n}\" }, \"app.js\": { \"type\": \"f\", \"contents\": \"// The object 'Contracts' will be injected here, which contains all data for all contracts, keyed on contract name:\n// Contracts['MyContract'] = {\n//  abi: [],\n//  address: \"0x..\",\n//  endpoint: \"http://....\"\n// }\n\nfunction Empty(Contract) {\n    this.web3 = null;\n    this.instance = null;\n    this.Contract = Contract;\n}\n\nEmpty.prototype.onReady = function() {\n    this.init(function () {\n        $('#message').append(\"DApp loaded successfully.\");\n    });\n}\n\nEmpty.prototype.init = function(cb) {\n    // We create a new Web3 instance using either the Metamask provider\n    // or an independent provider created towards the endpoint configured for the contract.\n    this.web3 = new Web3(\n        (window.web3 && window.web3.currentProvider) ||\n        new Web3.providers.HttpProvider(this.Contract.endpoint));\n\n    // Create the contract interface using the ABI provided in the configuration.\n    var contract_interface = this.web3.eth.contract(this.Contract.abi);\n\n    // Create the contract instance for the specific address provided in the configuration.\n    this.instance = contract_interface.at(this.Contract.address);\n\n    cb();\n}\n\nvar empty = new Empty(Contracts['MyContract']);\n\n$(document).ready(function() {\n    empty.onReady();\n});\" } } }, \"contracts\": { \"type\": \"d\", \"children\": { \"Empty.sol\": { \"type\": \"f\", \"contents\": \"pragma solidity ^0.4.25;\n\ncontract MyContract {\n    constructor() public {\n    }\n}\" } } }, \"README.md\": { \"type\": \"f\", \"contents\": \"# Empty DApp project\n\nThis is a bare bones dapp project containing a smart contract and boilerplate app files to get started.\n\n## Where to go from here\n\nCheck out the tutorials to find our more how to build your dapp.\n\" }, \"dappfile.json\": { \"type\": \"f\", \"contents\": \"{\n    \"project\": {\n        \"info\": {\n            \"name\": \"Empty\",\n            \"title\": \"Empty\"\n        }\n    },\n    \"environments\": [\n        {\n            \"name\": \"browser\"\n        },\n        {\n            \"name\": \"custom\"\n        },\n        {\n            \"name\": \"rinkeby\"\n        },\n        {\n            \"name\": \"ropsten\"\n        },\n        {\n            \"name\": \"kovan\"\n        },\n        {\n            \"name\": \"infuranet\"\n        },\n        {\n            \"name\": \"mainnet\"\n        }\n    ],\n    \"contracts\": [\n        {\n            \"source\": \"/contracts/Empty.sol\",\n            \"name\": \"MyContract\",\n            \"args\": []\n        }\n    ],\n    \"wallets\": [\n        {\n            \"desc\": \"This is a wallet for local development\",\n            \"name\": \"development\"\n        },\n        {\n            \"desc\": \"A private wallet\",\n            \"name\": \"private\"\n        },\n        {\n            \"desc\": \"External wallet integrating with Metamask and other compatible wallets\",\n            \"name\": \"external\",\n            \"type\": \"external\"\n        }\n    ],\n    \"accounts\": [\n        {\n            \"name\": \"Default\",\n            \"_environments\": [\n                {\n                    \"name\": \"browser\",\n                    \"data\": {\n                        \"wallet\": \"development\",\n                        \"index\": 0\n                    }\n                },\n                {\n                    \"name\": \"custom\",\n                    \"data\": {\n                        \"wallet\": \"private\",\n                        \"index\": 0\n                    }\n                },\n                {\n                    \"name\": \"rinkeby\",\n                    \"data\": {\n                        \"wallet\": \"external\",\n                        \"index\": 0\n                    }\n                },\n                {\n                    \"name\": \"ropsten\",\n                    \"data\": {\n                        \"wallet\": \"external\",\n                        \"index\": 0\n                    }\n                },\n                {\n                    \"name\": \"kovan\",\n                    \"data\": {\n                        \"wallet\": \"external\",\n                        \"index\": 0\n                    }\n                },\n                {\n                    \"name\": \"infuranet\",\n                    \"data\": {\n                        \"wallet\": \"external\",\n                        \"index\": 0\n                    }\n                },\n                {\n                    \"name\": \"mainnet\",\n                    \"data\": {\n                        \"wallet\": \"external\",\n                        \"index\": 0\n                    }\n                }\n            ]\n        }\n    ]\n}\" } } } }"
}
