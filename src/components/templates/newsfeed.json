{
    "id": 2,
    "name": "Uncensorable News Feed",
    "description": "Publish news that nobody can remove.",
    "image": "/static/img/templates/img-news-feed.png",
    "categories": [0, 2],
    "files": {
        "/": {
            "type": "d",
            "children": {
                "app": {
                    "type": "d",
                    "children": {
                        "app.html": {
                            "type": "f",
                            "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/jquery@3.3.1/dist/jquery.js\"></script>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/web3@0.20.5/dist/web3.min.js\"></script>\n        <!-- The generated javascript and app.js will be substituted in below -->\n        <!-- JAVASCRIPT -->\n\n        <!-- The app.css contents will be substituted in below -->\n        <!-- STYLE -->\n    </head>\n    <body>\n        <h1>YOUR CENSORSHIP RESISTANT NEWSFEED</h1>\n        <h2 class=\"error\">There was an error communicating with the contract.</h2>\n        <div id=\"articles\"></div>\n    </body>\n</html>"
                        },
                        "app.css": {
                            "type": "f",
                            "contents": "body {\n    background-color: darkred;\n    font-size: 1.3em;\n    text-align: center;\n    color: antiquewhite;\n}\n\nh3 {\n    font-size: 1.6em;\n}\n\n.error {\n    display: none;\n}\n\ndiv.article {\n    margin: 10px;\n    padding: 20px;\n    display: block;\n    background-color: black;\n}\n\ndiv.article a {\n    color: darkgoldenrod;\n}"
                        },
                        "app.js": {
                            "type": "f",
                            "contents": "// The object 'Contracts' will be injected here, which contains all data for all contracts, keyed on contract name:\n// Contracts['NewsFeed'] = {\n//  abi: [],\n//  address: \"0x..\",\n//  endpoint: \"http://....\"\n// }\nfunction Articles(Contract) {\n    this.web3 = null;\n    this.instance = null;\n    this.Contract = Contract;\n}\n\nArticles.prototype.getNumArticles = function(cb) {\n    this.instance.numArticles(function (error, result) {\n        cb(error, result);\n    });\n}\n\nArticles.prototype.getArticle = function(index, cb) {\n    this.instance.getArticle(index, function (error, result) {\n        cb(error, result);\n    });\n}\n\nArticles.prototype.init = function() {\n    // We create a new Web3 instance using either the Metamask provider\n    // or an independant provider created towards the endpoint configured for the contract.\n    this.web3 = new Web3(\n        (window.web3 && window.web3.currentProvider) ||\n        new Web3.providers.HttpProvider(this.Contract.endpoint));\n\n    // Create the contract interface using the ABI provided in the configuration.\n    var contract_interface = this.web3.eth.contract(this.Contract.abi);\n\n    // Create the contract instance for the specific address provided in the configuration.\n    this.instance = contract_interface.at(this.Contract.address);\n};\n\nArticles.prototype.renderArticle = function(index) {\n    var that = this;\n    if (index < 0) {\n        return;\n    }\n    this.getArticle(index, function (error, result) {\n        if (error) {\n            console.error(\"Could not load article:\", error);\n            $('#articles').append(\n                \"<h3>Could not load article.</h3>\"\n            );\n            return;\n        }\n        else {\n            var data = `\n                <div class='article'><h3>` + result[0] + `</h3>\n                <a target='_blank' href='` + result[1] + `'>` + result[1] + `</a></div>\n            `;\n            $('#articles').append(data);\n        }\n        that.renderArticle(index - 1);\n    });\n}\n\nArticles.prototype.main = function() {\n    var that = this;\n    this.getNumArticles(function (error, result) {\n        if (error) {\n            console.error(error);\n            $(\".error\").show();\n            return;\n        }\n        var nrArticles = result.toNumber();\n        \n        if (nrArticles == 0) {\n            $('#articles').append(\n                \"<h3>No articles here yet.. Try reloading in a while.</h3>\"\n            );\n        }\n        else {\n            that.renderArticle(nrArticles - 1);\n        }\n    });\n}\n\nArticles.prototype.onReady = function() {\n    this.init();\n    this.main();\n};\n\nvar articles = new Articles(Contracts['NewsFeed']);\n\n$(document).ready(function() {\n    articles.onReady();\n});"
                        },
                        "contracts": {
                            "type": "d",
                            "children": {}
                        }
                    }
                },
                "contracts": {
                    "type": "d",
                    "children": {
                        "NewsFeed.sol": {
                            "type": "f",
                            "contents": "pragma solidity ^0.4.25;\n\ncontract NewsFeed {\n    address public owner;\n    address public author;\n    uint256 public numArticles;\n\n    struct Article {\n        string title;\n        string hash;\n    }\n\n    Article[] articles;\n\n    constructor(address givenAuthor)\n        public\n    {\n        require(givenAuthor != 0x0);\n        owner = msg.sender;\n        author = givenAuthor;\n    }\n\n    function publish(string title, string hash)\n        public\n    {\n        require(msg.sender == author);\n\n        Article memory article = Article(\n            title,\n            hash\n        );\n        articles.push(article);\n        numArticles += 1;\n    }\n\n    function getArticle(uint256 index)\n        public\n        constant returns (string, string)\n    {\n        return (articles[index].title, articles[index].hash);\n    }\n}"
                        }
                    }
                },
                "README.md": {
                    "type": "f",
                    "contents": "# The Censorship Resistant News Feed\n\nThe point of this DApp is to provide an `Author` with a censorship proof way of publishing news articles containing a link to IPFS or similar.\n\n## Config\nThe argument to the contract constructor takes the address of the `Author` having rights to publish articles.\n\nThis could be the same account as the one deploying the contract or it could be another account."
                }
            }
        }
    },
    "dappfile": {
        "environments": [
            {
                "name": "browser"
            },
            {
                "name": "custom"
            },
            {
                "name": "rinkeby"
            },
            {
                "name": "ropsten"
            },
            {
                "name": "kovan"
            },
            {
                "name": "infuranet"
            },
            {
                "name": "mainnet"
            }
        ],
        "constants": [],
        "contracts": [
            {
                "source": "/contracts/NewsFeed.sol",
                "args": [
                    {
                        "account": "Default"
                    }
                ],
                "blockchain": "ethereum",
                "name": "NewsFeed",
                "network": "browser"
            }
        ],
        "wallets": [
            {
                "desc": "This is a wallet for local development",
                "name": "development",
                "blockchain": "ethereum"
            },
            {
                "desc": "A private wallet",
                "name": "private",
                "blockchain": "ethereum"
            },
            {
                "desc": "External wallet integrating with Metamask and other compatible wallets",
                "name": "external",
                "blockchain": "ethereum",
                "type": "external"
            }
        ],
        "accounts": [
            {
                "name": "Default",
                "blockchain": "ethereum",
                "_environments": [
                    {
                        "name": "browser",
                        "data": {
                            "wallet": "development",
                            "index": 0
                        }
                    },
                    {
                        "name": "custom",
                        "data": {
                            "wallet": "private",
                            "index": 0
                        }
                    },
                    {
                        "name": "rinkeby",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "ropsten",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "kovan",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "infuranet",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "mainnet",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    }
                ]
            }
        ]
    },
    "format": "dapps1.0.0"
}
