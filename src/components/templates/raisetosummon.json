{
    "id": 3,
    "name": "Raise to Summon",
    "description": "Raise Funds to summon a V.I.P. to a meetup/conference/hackathon",
    "image": "/static/img/templates/img-raise-to-summon.png",
    "categories": [0, 1],
    "files": {
        "/": {
            "type": "d",
            "children": {
                "app": {
                    "type": "d",
                    "children": {
                        "app.html": {
                            "type": "f",
                            "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/jquery@3.3.1/dist/jquery.js\"></script>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/web3@0.20.5/dist/web3.min.js\"></script>\n        <!-- The generated javascript and app.js will be substituted in below -->\n        <!-- JAVASCRIPT -->\n\n        <!-- The app.css contents will be substituted in below -->\n        <!-- STYLE -->\n    </head>\n    <body>\n        <div class=\"heading\">\n                <h1>Raise Funds to Summon Nick Johnson to The Decentralized Camp</h1>\n        </div>\n        <div>\n            <div class=\"main\">\n                <div class=\"text loading\">\n                    <h2>loading...</h2>\n                </div>\n                <div class=\"text error\">\n                    <h2>Could not call contract.</h2>\n                </div>\n                <div class=\"text noinit\">\n                    <h2>The contract has not been initiated by the receiver, yet.</h2>\n                </div>\n                <div class=\"text nometamask\">\n                    <span>Metamask is not found. If you have <a href=\"https://metamask.io\">Metamask</a> installed then you can donate directly from here.</span>\n                </div>\n                <div class=\"text lockedmetamask\">\n                    <span>Metamask is found but it seems to be locked. Unlock Metamask and then reload the page.</span>\n                </div>\n                <div class=\"text cancelled\">\n                    <span>The donation was cancelled.</span>\n                </div>\n                <div class=\"text thanks\">\n                    <span>Thank you for your donation!</span>\n                </div>\n                <div class=\"text claimed\">\n                    <span>Nick Johnson is summoned! (He collected the ether)</span>\n                </div>\n                <div class=\"text donate\">\n                    <span>Minimum amount required: <span id=\"donation_threshold\"></span></span><br />\n                    <span>Amount raised: <span id=\"donation_raised\"></span></span><br />\n                    <span>Wei to donate: <input type=\"text\" value=\"1\" id=\"donation_value\" /></span><br />\n                    <button id=\"donatebtn\" type=\"submit\">Donate using Metamask</button>\n                </div>\n            </div>\n        </div>\n    </body>\n</html>"
                        },
                        "app.css": {
                            "type": "f",
                            "contents": "body {\n    background-color: steelblue;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n}\n.text {\n    display: none;\n}\n\n.heading {\n    display: block;\n    background-color: antiquewhite;\n    border-radius: 10px;\n    padding: 10px;\n    color: #333;\n    text-align: center;\n}\n\n.main {\n    margin-top: 40px;\n    display: block;\n    text-align: center;\n    font-size: 1.3em;\n    color: #eee;\n}\n\nbutton {\n    background-color: darkkhaki;\n    padding: 10px;\n    color: green;\n    font-size: 1.3em;\n}"
                        },
                        "app.js": {
                            "type": "f",
                            "contents": "// The object 'Contracts' will be injected here, which contains all data for all contracts, keyed on contract name:\n// Contracts['RaiseToSummon'] = {\n//  abi: [],\n//  address: \"0x..\",\n//  endpoint: \"http://....\"\n// }\n\nfunction RaiseToSummon(Contract) {\n    this.web3 = null;\n    this.instance = null;\n    this.Contract = Contract;\n}\n\nRaiseToSummon.prototype.onReady = function() {\n    var that = this;\n    $(\".loading\").show();\n    if (typeof window.web3 !== 'undefined' && window.web3.currentProvider) {\n        // Wait for Metamask accounts to be available\n        this.waitForAccounts(function() {\n            that.main();\n        });\n    } else {\n        this.lackingWeb3();\n    }\n}\n\nRaiseToSummon.prototype.waitForAccounts = function(cb) {\n    var that = this;\n    if(this.hasAccounts()) {\n        cb();\n    }\n    else {\n        // We keep trying since Metamask populates the accounts list\n        // after the page has been loaded.\n        $(\".text\").hide();\n        $(\".lockedmetamask\").show();\n        setTimeout(function() {that.waitForAccounts()}, 1000);\n    }\n}\n\nRaiseToSummon.prototype.hasAccounts = function() {\n    if (window.web3.eth.accounts.length > 0) {\n        return true;\n    }\n    return false;\n}\n\nRaiseToSummon.prototype.main = function() {\n    var that = this;\n    this.initContract();\n    this.isInited(function(isInited) {\n        if(!isInited) {\n            $(\".text\").hide();\n            $(\".noinit\").show();\n            return;\n        }\n        that.hasBeenClaimed(function(isClaimed) {\n            $(\".text\").hide();\n            if(isClaimed) {\n                $(\".claimed\").show();\n                return;\n            }\n            $(\"#donatebtn\").click(function(e) {\n                e.preventDefault();\n                that.donate();\n            });\n            $(\".donate\").show();\n            that.updateStatus();\n        });\n    });\n}\n\nRaiseToSummon.prototype.isInited = function(cb) {\n    this.instance.minimumAmountRequired(function (error, result) {\n        if (error) {\n            $(\".text\").hide();\n            $(\".error\").show();\n            return;\n        }\n        var minimumAmount = result.toNumber();\n        if (minimumAmount == 0) {\n            cb(false);\n        }\n        else {\n            cb(true);\n        }\n    });\n}\n\nRaiseToSummon.prototype.hasBeenClaimed = function(cb) {\n    var that = this;\n    this.instance.hasBeenClaimed(function (error, result) {\n        if (error) {\n            $(\".text\").hide();\n            $(\".error\").show();\n            return;\n        }\n        cb(result);\n    });\n}\n\nRaiseToSummon.prototype.initContract = function() {\n    this.web3 = new Web3(window.web3.currentProvider);\n    var contract_interface = this.web3.eth.contract(this.Contract.abi);\n    this.instance = contract_interface.at(this.Contract.address);\n}\n\nRaiseToSummon.prototype.updateStatus = function() {\n    var that = this;\n    this.instance.minimumAmountRequired(function (error, result) {\n        if(error) {\n            setTimeout(function() {that.updateStatus()}, 5000);\n        }\n        else {\n            $(\"#donation_threshold\").text(result.toNumber());\n            that.instance.totalAmountRaised(function (error, result) {\n                if(error) {\n                    setTimeout(function() {that.updateStatus()}, 5000);\n                }\n                else {\n                    $(\"#donation_raised\").text(result.toNumber());\n                    setTimeout(function() {that.updateStatus()}, 5000);\n                }\n            });\n        }\n    });\n}\n\nRaiseToSummon.prototype.lackingWeb3 = function() {\n    $(\".text\").hide();\n    $(\".nometamask\").show();\n}\n\nRaiseToSummon.prototype.donate = function() {\n    var value = parseInt(document.getElementById(\"donation_value\").value);\n    if(isNaN(value) || value < 1) {\n        alert(\"Please enter a valid value of wei to donate.\");\n        return;\n    }\n    $(\".text\").hide();\n    $(\".loading\").show();\n    // Note: we must refer to the original window.web3 object here to get the Metamask accounts.\n    this.instance.donate({ from: window.web3.eth.accounts[0], value: value, gas: \"99000\", gasPrice: '33000000000' },\n        function(error, result) {\n            $(\".text\").hide();\n            if (error) {\n                console.error(error);\n                $(\".cancelled\").show();\n                return;\n            }\n            $(\".thanks\").show();\n        });\n}\n\nvar raiseToSummon = new RaiseToSummon(Contracts['RaiseToSummon']);\n\n$(document).ready(function() {\n    raiseToSummon.onReady();\n});"
                        },
                        "contracts": {
                            "type": "d",
                            "children": {}
                        }
                    }
                },
                "contracts": {
                    "type": "d",
                    "children": {
                        "RaiseToSummon.sol": {
                            "type": "f",
                            "contents": "/*\n    Created by Superblocks and The Decentralized Camp to successfully summon Nick Johnson to Stockholm for a hackathon.\n*/\npragma solidity ^0.4.25;\n\ncontract RaiseToSummon {\n\n    // Base definitions\n    address public owner;\n    address public receiver;\n    string public cause;\n    uint256 public expirationInSeconds;\n    bool public hasBeenClaimed;\n    uint256 public timeStarted;\n\n    // Dynamic data\n    uint256 public minimumAmountRequired;\n    uint256 public numPayments;\n    uint256 public totalAmountRaised;\n    mapping(address => uint256) donationData;\n\n    constructor(address beneficiary, string message, uint256 secondsUntilExpiration)\n        public\n    {\n        require(beneficiary != 0x0);\n        require(secondsUntilExpiration > 0);\n\n        owner = msg.sender;\n        receiver = beneficiary;\n        cause = message;\n        expirationInSeconds = secondsUntilExpiration;\n        hasBeenClaimed = false;\n\n        minimumAmountRequired = 0;\n        numPayments = 0;\n        totalAmountRaised = 0;\n        timeStarted = block.timestamp;\n    }\n\n    function ()\n        public\n    {\n        revert();\n    }\n\n    function donate()\n        public\n        payable\n    {\n        require(msg.sender != receiver);\n        require(block.timestamp < (timeStarted + expirationInSeconds));\n        require(msg.value > 0);\n        require(minimumAmountRequired != 0);\n        require(hasBeenClaimed == false);\n\n        assert(donationData[msg.sender] + msg.value >= donationData[msg.sender]);\n        assert(totalAmountRaised + msg.value >= totalAmountRaised);\n        assert(numPayments + 1 >= numPayments);\n\n        donationData[msg.sender] += msg.value;\n        totalAmountRaised += msg.value;\n        numPayments += 1;\n    }\n\n    // Note: can only be set once\n    function receiverSetAmountRequired(uint256 minimum)\n        public\n    {\n        require(msg.sender == receiver);\n        require(minimumAmountRequired == 0);\n        require(minimum > 0);\n\n        minimumAmountRequired = minimum;\n    }\n\n    function receiverWithdraw()\n        public\n    {\n        require(msg.sender == receiver);\n        require(totalAmountRaised >= minimumAmountRequired);\n        require(this.balance > 0);\n        require(block.timestamp < (timeStarted + expirationInSeconds));\n        require(hasBeenClaimed == false);\n\n        hasBeenClaimed = true;\n        receiver.transfer(this.balance);\n        // Expecting transfer to throw on error\n        // assert(this.balance == 0);\n    }\n\n    function withdraw()\n        public\n    {\n        require(donationData[msg.sender] > 0);\n        require(block.timestamp > (timeStarted + expirationInSeconds));\n        require(hasBeenClaimed == false);\n\n        var value = donationData[msg.sender];\n        donationData[msg.sender] = 0;\n        msg.sender.transfer(value);\n        // Expecting transfer to throw on error\n        // assert(donationData[donor] == 0);\n    }\n\n    function currentTotalExcess()\n        public\n        constant returns (uint256)\n    {\n        if (totalAmountRaised > minimumAmountRequired) {\n            return totalAmountRaised - minimumAmountRequired;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function expirationTimestamp()\n        public\n        constant returns (uint256)\n    {\n        assert((timeStarted + expirationInSeconds) >= timeStarted);\n        return (timeStarted + expirationInSeconds);\n    }\n}"
                        }
                    }
                },
                "README.md": {
                    "type": "f",
                    "contents": "# Raise Funds to Summon Nick Johnson to your Hackathon\n\nThis is an example of a real world DApp which [The Decentralized Camp - Stockholm](https://meetup.com/decentralized-camp) used to Summon the very knowledgable and generous Nick Johnson to Stockholm for the annual hackathon.\n\n## HOW TO\n"
                }
            }
        }
    },
    "dappfile": {
        "environments": [
            {
                "name": "browser"
            },
            {
                "name": "custom"
            },
            {
                "name": "rinkeby"
            },
            {
                "name": "ropsten"
            },
            {
                "name": "kovan"
            },
            {
                "name": "infuranet"
            },
            {
                "name": "mainnet"
            }
        ],
        "constants": [],
        "contracts": [
            {
                "source": "/contracts/RaiseToSummon.sol",
                "args": [
                    {
                        "account": "NickJohnson"
                    },
                    {
                        "value": "Summon Nick Johnson"
                    },
                    {
                        "value": "604800"
                    }
                ],
                "blockchain": "ethereum",
                "name": "RaiseToSummon",
                "network": "browser"
            }
        ],
        "wallets": [
            {
                "desc": "This is a wallet for local development",
                "name": "development",
                "blockchain": "ethereum"
            },
            {
                "desc": "A private wallet",
                "name": "private",
                "blockchain": "ethereum"
            },
            {
                "desc": "External wallet integrating with Metamask and other compatible wallets",
                "name": "external",
                "blockchain": "ethereum",
                "type": "external"
            }
        ],
        "accounts": [
            {
                "name": "Default",
                "blockchain": "ethereum",
                "_environments": [
                    {
                        "name": "browser",
                        "data": {
                            "wallet": "development",
                            "index": 0
                        }
                    },
                    {
                        "name": "custom",
                        "data": {
                            "wallet": "private",
                            "index": 0
                        }
                    },
                    {
                        "name": "rinkeby",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "ropsten",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "kovan",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "infuranet",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "mainnet",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    }
                ]
            },
            {
                "name": "NickJohnson",
                "blockchain": "ethereum",
                "address": "0x0",
                "_environments": [
                    {
                        "name": "browser",
                        "data": {
                            "wallet": "development",
                            "index": 1
                        }
                    },
                    {
                        "name": "custom",
                        "data": {
                            "wallet": "private",
                            "index": 1
                        }
                    }
                ]
            }
        ]
    }
}
