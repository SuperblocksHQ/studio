{
    "id": 0,
    "name": "Empty Project",
    "description": "Create an empty project and start coding!",
    "image": "/static/img/templates/img-empty.png",
    "categories": [0, 2],
    "files": {
        "/": {
            "type": "d",
            "children": {
                "app": {
                    "type": "d",
                    "children": {
                        "app.html": {
                            "type": "f",
                            "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/jquery@3.3.1/dist/jquery.js\"></script>\n        <script type=\"text/javascript\" src=\"https://unpkg.com/web3@0.20.5/dist/web3.min.js\"></script>\n        <!-- The generated javascript and app.js will be substituted in below -->\n        <!-- JAVASCRIPT -->\n\n        <!-- The app.css contents will be substituted in below -->\n        <!-- STYLE -->\n    </head>\n    <body>\n        <h1><span id=\"message\"></span></h1>\n    </body>\n</html>"
                        },
                        "app.css": {
                            "type": "f",
                            "contents": "body {\n    background-color: #725BA4;\n    color: #FCE8DF;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    text-align: center;\n}"
                        },
                        "app.js": {
                            "type": "f",
                            "contents": "// The object 'Contracts' will be injected here, which contains all data for all contracts, keyed on contract name:\n// Contracts['MyContract'] = {\n//  abi: [],\n//  address: \"0x..\",\n//  endpoint: \"http://....\"\n// }\n\nfunction Empty(Contract) {\n    this.web3 = null;\n    this.instance = null;\n    this.Contract = Contract;\n}\n\nEmpty.prototype.onReady = function() {\n    this.init(function () {\n        $('#message').append(\"DApp loaded successfully.\");\n    });\n}\n\nEmpty.prototype.init = function(cb) {\n    // We create a new Web3 instance using either the Metamask provider\n    // or an independant provider created towards the endpoint configured for the contract.\n    this.web3 = new Web3(\n        (window.web3 && window.web3.currentProvider) ||\n        new Web3.providers.HttpProvider(this.Contract.endpoint));\n\n    // Create the contract interface using the ABI provided in the configuration.\n    var contract_interface = this.web3.eth.contract(this.Contract.abi);\n\n    // Create the contract instance for the specific address provided in the configuration.\n    this.instance = contract_interface.at(this.Contract.address);\n\n    cb();\n}\n\nvar empty = new Empty(Contracts['MyContract']);\n\n$(document).ready(function() {\n    empty.onReady();\n});"
                        },
                        "contracts": {
                            "type": "d",
                            "children": {}
                        }
                    }
                },
                "contracts": {
                    "type": "d",
                    "children": {
                        "MyContract.sol": {
                            "type": "f",
                            "contents": "pragma solidity ^0.4.25;\n\ncontract MyContract {\n    constructor() public {\n    }\n}"
                        }
                    }
                },
                "README.md": {
                    "type": "f",
                    "contents": "# Empty DApp project\n\nThis is a bare bones dapp project containg a smart contract and boilerplate app files to get started.\n\n## Where to go from here\n\nCheck out the tutorials to find our more how to build your dapp.\n"
                }
            }
        }
    },
    "dappfile": {
        "environments": [
            {
                "name": "browser"
            },
            {
                "name": "custom"
            },
            {
                "name": "rinkeby"
            },
            {
                "name": "ropsten"
            },
            {
                "name": "kovan"
            },
            {
                "name": "infuranet"
            },
            {
                "name": "mainnet"
            }
        ],
        "constants": [],
        "contracts": [
            {
                "source": "/contracts/MyContract.sol",
                "args": [],
                "blockchain": "ethereum",
                "name": "MyContract",
                "network": "browser"
            }
        ],
        "wallets": [
            {
                "desc": "This is a wallet for local development",
                "name": "development",
                "blockchain": "ethereum"
            },
            {
                "desc": "A private wallet",
                "name": "private",
                "blockchain": "ethereum"
            },
            {
                "desc": "External wallet integrating with Metamask and other compatible wallets",
                "name": "external",
                "blockchain": "ethereum",
                "type": "external"
            }
        ],
        "accounts": [
            {
                "name": "Default",
                "blockchain": "ethereum",
                "_environments": [
                    {
                        "name": "browser",
                        "data": {
                            "wallet": "development",
                            "index": 0
                        }
                    },
                    {
                        "name": "custom",
                        "data": {
                            "wallet": "private",
                            "index": 0
                        }
                    },
                    {
                        "name": "rinkeby",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "ropsten",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "kovan",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "infuranet",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    },
                    {
                        "name": "mainnet",
                        "data": {
                            "wallet": "external",
                            "index": 0
                        }
                    }
                ]
            }
        ]
    }
}
